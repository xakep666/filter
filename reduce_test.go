// Code generated by go2go; DO NOT EDIT.


//line reduce_test.go2:5
package filter

//line reduce_test.go2:5
import (
//line reduce_test.go2:5
 "reflect"
//line reduce_test.go2:5
 "testing"
//line reduce_test.go2:5
)

//line reduce_test.go2:11
func mul(a, b int) int {
	return a * b
}

func TestReduce(t *testing.T) {
	a := make([]int, 10)
	for i := range a {
		a[i] = i + 1
	}

	out := instantiate୦୦Reduce୦int(a, mul, 1)
	expect := 1
	for i := range a {
		expect *= a[i]
	}
	if expect != out {
		t.Fatalf("expected %d got %d", expect, out)
	}
}
//line reduce.go2:17
func instantiate୦୦Reduce୦int(slice []int, pairFunction func(int, int,) int, zero int,) int {
	switch len(slice) {
	case 0:
		return zero
	case 1:
		return slice[0]
	}

//line reduce.go2:26
 out := pairFunction(slice[0], slice[1])

//line reduce.go2:29
 for i := 2; i < len(slice); i++ {
		out = pairFunction(out, slice[i])
	}
	return out
}

//line reduce.go2:33
var _ = reflect.Append
//line reduce.go2:33
var _ = testing.AllocsPerRun
